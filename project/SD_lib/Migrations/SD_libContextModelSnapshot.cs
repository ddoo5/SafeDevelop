// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SD_lib.DB;

#nullable disable

namespace SD_lib.Migrations
{
    [DbContext(typeof(SD_libContext))]
    partial class SD_libContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("SD_lib.Entity.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("INTEGER")
                        .HasColumnName("banned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("salt");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("surname");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("SD_lib.Entity.Models.AccountSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateClosed")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_closed");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateLastRequest")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_last_request");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(384)
                        .HasColumnType("TEXT")
                        .HasColumnName("token");

                    b.HasKey("SessionId");

                    b.HasIndex("AccountId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("SD_lib.Entity.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");
            modelBuilder.Entity("SD_lib.Entity.Models.Card", b =>
                {
                    b.Property<Guid>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("guid");

                    b.Property<int>("CVV")
                        .HasMaxLength(3)
                        .HasColumnType("INTEGER")
                        .HasColumnName("cvv");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                    b.Property<int>("CardNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("card_number");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_expiration");

                    b.Property<int?>("HolderClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("CardId");

                    b.HasIndex("HolderClientId");

                    b.ToTable("Cards");
                    b.ToTable("Cards", "Work");
                });

            modelBuilder.Entity("SD_lib.Entity.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("surname");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SD_lib.Entity.Models.AccountSession", b =>
                {
                    b.HasOne("SD_lib.Entity.Models.Account", "Account")
                        .WithMany("Sessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                    b.ToTable("Clients", "Work");
                });

            modelBuilder.Entity("SD_lib.Entity.Models.Card", b =>
                {
                    b.HasOne("SD_lib.Entity.Models.Client", "Holder")
                        .WithMany("ClientCards")
                        .HasForeignKey("HolderClientId");

                    b.Navigation("Holder");
                });

            modelBuilder.Entity("SD_lib.Entity.Models.Account", b =>
                {
                    b.Navigation("Sessions");
                });


            modelBuilder.Entity("SD_lib.Entity.Models.Client", b =>
                {
                    b.Navigation("ClientCards");
                });
#pragma warning restore 612, 618
        }
    }
}
